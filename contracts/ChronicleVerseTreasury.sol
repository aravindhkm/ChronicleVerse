// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.17;

import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/introspection/IERC165.sol";
import "@openzeppelin/contracts/utils/introspection/ERC165.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";

// File: contracts/AdminRole.sol

/**
 * @notice Wraps the default admin role from OpenZeppelin's AccessControl for easy integration.
 */
abstract contract AdminRole is AccessControl {
    constructor(address admin) {
        // Grant the role to a specified account
        _setupRole(DEFAULT_ADMIN_ROLE, admin);
    }

    modifier onlyAdmin() {
        require(
            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),
            "AdminRole: caller does not have the Admin role"
        );
        _;
    }

    function isAdmin(address account) public view returns (bool) {
        return hasRole(DEFAULT_ADMIN_ROLE, account);
    }

    /**
     * @dev onlyAdmin is enforced by `grantRole`.
     */
    function grantAdmin(address account) public {
        grantRole(DEFAULT_ADMIN_ROLE, account);
    }

    /**
     * @dev onlyAdmin is enforced by `revokeRole`.
     */
    function revokeAdmin(address account) public {
        revokeRole(DEFAULT_ADMIN_ROLE, account);
    }
   
}

// File: contracts/OperatorRole.sol

/**
 * @notice Wraps a role from OpenZeppelin's AccessControl for easy integration.
 */
abstract contract OperatorRole is AccessControl {
    bytes32 public constant OPERATOR_ROLE = keccak256("OPERATOR_ROLE");

    function isOperator(address account) public view returns (bool) {
        return hasRole(OPERATOR_ROLE, account);
    }

    /**
     * @dev onlyOperator is enforced by `grantRole`.
     */
    function grantOperator(address account) public {
        grantRole(OPERATOR_ROLE, account);
    }

    /**
     * @dev onlyOperator is enforced by `revokeRole`.
     */
    function revokeOperator(address account) public {
        revokeRole(OPERATOR_ROLE, account);
    }
}

// File: contracts/CollateralManagement.sol

/**
 * @notice Enables deposits and withdrawals.
 */
abstract contract CollateralManagement is AdminRole {
    using Address for address payable;

    event FundsWithdrawn(address indexed to, uint256 amount);

    /**
     * @notice Accept native currency payments (i.e. fees)
     */
    // solhint-disable-next-line no-empty-blocks
    receive() external payable {}

    /**
     * @notice Allows an admin to withdraw funds.
     * @dev    In normal operation only ETH is required, but this allows access to any
     *         ERC-20 funds sent to the contract as well.
     *
     * @param to        Address to receive the withdrawn funds
     * @param amount    Amount to withdrawal or 0 to withdraw all available funds
     */
    function withdrawFunds(address payable to, uint256 amount)
        public
        onlyAdmin
    {
        if (amount == 0) {
            amount = address(this).balance;
        }
        to.sendValue(amount);

        emit FundsWithdrawn(to, amount);
    }
       
}

// File: contracts/ISendValueWithFallbackWithdraw.sol

/**
 * @notice Attempt to send ETH and if the transfer fails or runs out of gas, store the balance
 * for future withdrawal instead.
 */
interface ISendValueWithFallbackWithdraw {
    /**
     * @notice Allows a user to manually withdraw funds which originally failed to transfer.
     */
    function withdraw() external;
}

// File: contracts/WithdrawFromEscrow.sol

/**
 * @notice Allows recovery of funds that were not successfully transferred directly by the market.
 */
abstract contract WithdrawFromEscrow is AdminRole {
    function withdrawFromEscrow(ISendValueWithFallbackWithdraw market)
        external
        onlyAdmin
    {
        market.withdraw();
    }
}

/**
 * @notice The Foundation treasury which collects fees generated by the market.
 * @dev The core responsibility of this contract is collecting fees.
 */
contract ChronicleVerseTreasury is
    AdminRole,
    OperatorRole,
    CollateralManagement,
    WithdrawFromEscrow
{
    constructor(address admin) AdminRole(admin){}
}